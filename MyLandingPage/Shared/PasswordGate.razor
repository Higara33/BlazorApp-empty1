@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject IConfiguration Configuration

@code {
    private string _input = "";
    private bool _authorized;
    private string CorrectPassword => Configuration["PasswordGate:Password"] ?? "";
    private const string StorageKey = "app-password-authorized";

    protected override async Task OnInitializedAsync()
    {
        var saved = await JS.InvokeAsync<string>("localStorage.getItem", StorageKey);
        _authorized = (saved == "1");
    }

    private async Task CheckPassword()
    {
        if (_input == CorrectPassword)
        {
            _authorized = true;
            await JS.InvokeVoidAsync("localStorage.setItem", StorageKey, "1");
        }
        else
        {
            _input = "";
            await JS.InvokeVoidAsync("alert", "Неверный пароль");
        }
    }
}

@if (!_authorized)
{
    <div class="password-gate d-flex vh-100 justify-content-center align-items-center">
        <div class="card p-4 shadow" style="max-width: 320px; width: 100%;">
            <h5 class="card-title text-center mb-3">Введите пароль</h5>
            <input type="password"
                   class="form-control mb-3"
                   @bind="_input"
                   placeholder="••••••••" />
            <button class="btn btn-primary w-100" @onclick="CheckPassword">
                Подключиться
            </button>
        </div>
    </div>
}
else
{
    @ChildContent
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
}
